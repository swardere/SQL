#In this SQL, We are querying a database with different tables to quantify statistics about customer and order data. 

#1. How many orders were placed in January?
SELECT count(orderID) 
FROM BIT_DB.JanSales
WHERE length(orderid) = 6
AND orderID <> 'Order ID';

#2. How many of those orders were for an iPhone?
SELECT count(orderID) 
FROM BIT_DB.JanSales
WHERE Product='iPhone'
AND length(orderid) = 6
AND orderID <> 'Order ID';

#3. Select the customer account numbers for all the orders that were placed in February.
SELECT distinct cust.acctnum
FROM BIT_DB.customers cust 

INNER JOIN BIT_DB.FebSales feb 
ON cust.order_id=feb.orderID
WHERE length(order_id) = 6
AND order_id <> 'OrderID';

#4. Which product was the cheapest one sold in January, and what was the price?
SELECT MIN(price), product
FROM BIT_DB.JanSales
GROUP BY product, price
ORDER BY price asc
LIMIT 1;

#5. What is the total revenue for each product sold in January?
SELECT product, sum(quantity)*price as revenue
FROM BIT_DB.JanSales
GROUP BY product;

#6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT product, sum(quantity),sum(quantity)*price as revenue
FROM BIT_DB.FebSales
WHERE location='548 Lincoln St, Seattle, WA 98101'
GROUP BY product;

#7.How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?

SELECT count(distinct cust.acctnum), avg(quantity*price)
FROM BIT_DB.FebSales feb

LEFT JOIN BIT_DB.customers cust 
ON feb.orderID=cust.order_id
WHERE feb.Quantity>2
AND length(order_id) = 6
AND order_id <> 'OrderID';

Now see if you can use 'like' and '%' to write SQL to answer the following question.

Try it out in your SQLite Studio SQL Editor to query the relevant table in the BIT_DB database.

# Now we use 'like' and '%' to write SQL to answer the following question.

#8. List all the products sold in Los Angeles in February, and include how many of each were sold.
SELECT distinct location, Product, SUM(Quantity)
FROM BIT_DB.FebSales
WHERE location like '%Los Angeles%'
GROUP BY product;

# MORE SQL PRACTICE WITH CUSTOMER ORDERS AND MONTHLY SALES REPORTS

#1. Which locations in New York received at least 3 orders in January, and how many orders did they each receive? (Hint: use HAVING).
SELECT distinct location, count(orderID)
FROM BIT_DB.JanSales
WHERE location LIKE '%New York%'
AND length(orderID) = 6 
AND orderID <> 'Order ID'
GROUP BY location
HAVING count(orderID)>2;

#2. How many of each type of headphone were sold in February?
SELECT sum(Quantity) as Quantity, product
FROM BIT_DB.FebSales
WHERE product LIKE '%headphones%'
AND length(orderID) = 6 
AND orderID <> 'Order ID'
GROUP BY product;

#3. What was the average amount spent per account in February?
SELECT avg(quantity*price)
FROM BIT_DB.FebSales feb

LEFT JOIN BIT_DB.customers cust
ON feb.orderID= cust.order_id
WHERE length(orderID) = 6 
AND orderID <> 'Order ID';

#4. What was the average quantity of products purchased per account in February?
SELECT sum(quantity)/count(cust.acctnum)
FROM BIT_DB.FebSales feb

LEFT JOIN BIT_DB.customers cust
ON feb.orderID= cust.order_id

WHERE length(orderID) = 6 
AND orderID <> 'Order ID';

#5. Which product brought in the most revenue in January and how much revenue did it bring in total?
SELECT product, 
sum(Quantity*price)
FROM BIT_DB.JanSales
GROUP BY product
ORDER BY sum(Quantity*price) desc
LIMIT 1;

